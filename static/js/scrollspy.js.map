{"version":3,"file":"/static/js/scrollspy.js","mappings":";;;;;;;;;AAAA,kCAAkC;AAClC,UAAU,YAAY,EAAE,mBAAO,CAAC,+GAAa;AAC7C;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;ACRO;AACP,gCAAgC;AAChC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;;AAEA,+DAA+D;;AAE/D;AACA,mCAAmC;;AAEnC;AACA;AACA,MAAM;AACN;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,iCAAiC,kBAAkB;AACnD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,2CAA2C,2BAA2B,KAAK,UAAU;AACrF;;AAEA;AACA,oBAAoB,0BAA0B;AAC9C;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,QAAQ;AAChC,YAAY,+CAA+C;AAC3D,qBAAqB,iBAAiB,GAAG,YAAY,QAAQ,cAAc,IAAI,mCAAmC;AAClH;;AAEA;AACA;AACA;;;;;;;UCzHA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;ACNyC;AAEzCA,uDAAS,CAAC,gBAAgB,EAAE;EACxBC,eAAe,EAAM,sBAAsB;EAC3CC,YAAY,EAAM,oBAAoB;EACtCC,gBAAgB,EAAE,YAAY;EAC9BC,MAAM,EAAY,GAAG;EACrBC,YAAY,EAAM;AACtB,CAAC,CAAC,C","sources":["webpack://wenprise-frontend-tool/./node_modules/.pnpm/simple-scrollspy@2.4.0/node_modules/simple-scrollspy/src/index.js","webpack://wenprise-frontend-tool/./node_modules/.pnpm/simple-scrollspy@2.4.0/node_modules/simple-scrollspy/src/scrollspy.js","webpack://wenprise-frontend-tool/webpack/bootstrap","webpack://wenprise-frontend-tool/webpack/runtime/compat get default export","webpack://wenprise-frontend-tool/webpack/runtime/define property getters","webpack://wenprise-frontend-tool/webpack/runtime/hasOwnProperty shorthand","webpack://wenprise-frontend-tool/webpack/runtime/make namespace object","webpack://wenprise-frontend-tool/./assets/scripts/modules/scrollspy.js"],"sourcesContent":["module.exports = (el, options = {}) => {\n  const { ScrollSpy } = require('./scrollspy')\n  const instance = new ScrollSpy(el, options)\n\n  window.onload = instance.onScroll()\n  window.addEventListener('scroll', () => instance.onScroll())\n\n  return instance\n}\n","export class ScrollSpy {\n  constructor(menu, options = {}) {\n    if (!menu) {\n      throw new Error('First argument is query selector to your navigation.')\n    }\n\n    if (typeof options !== 'object') {\n      throw new Error('Second argument must be instance of Object.')\n    }\n\n    let defaultOptions = {\n      sectionClass: '.scrollspy',\n      menuActiveTarget: 'li > a',\n      offset: 0,\n      hrefAttribute: 'href',\n      activeClass: 'active',\n      scrollContainer: '',\n      smoothScroll: {},\n    }\n\n    options.smoothScroll = options.smoothScroll === true && {} || options.smoothScroll\n\n    this.menuList = menu instanceof HTMLElement ? menu : document.querySelector(menu)\n    this.options = Object.assign({}, defaultOptions, options)\n\n    if(this.options.scrollContainer) {\n      this.scroller = this.options.scrollContainer instanceof HTMLElement ? this.options.scrollContainer : document.querySelector(this.options.scrollContainer)\n    } else {\n      this.scroller = window\n    }\n\n    this.sections = document.querySelectorAll(this.options.sectionClass)\n\n    this.attachEventListeners()\n  }\n\n  attachEventListeners() {\n    if (this.scroller) {\n      this.scroller.addEventListener('scroll', () => this.onScroll())\n\n      // smooth scroll\n      if (this.options.smoothScroll) {\n        const menuItems = this.menuList.querySelectorAll(this.options.menuActiveTarget)\n        menuItems.forEach((item) => item.addEventListener('click', this.onClick.bind(this)))\n      }\n    }\n  }\n\n  onClick(event) {\n    const targetSelector = event.target.getAttribute(this.options.hrefAttribute)\n    const targetElement = document.querySelector(targetSelector)\n\n    if (targetElement && this.options.smoothScroll) {\n      // prevent click event\n      event.preventDefault()\n      // handle smooth scrolling to 'targetElement'\n      this.scrollTo(targetElement)\n    }\n  }\n\n  onScroll() {\n    const section = this.getSectionInView()\n    const menuItem = this.getMenuItemBySection(section)\n\n    if (menuItem) {\n      this.removeCurrentActive({ ignore: menuItem })\n      this.setActive(menuItem)\n    }\n  }\n\n  scrollTo(targetElement) {\n    const smoothScrollBehavior = typeof this.options.smoothScrollBehavior === 'function' && this.options.smoothScrollBehavior\n\n    if (smoothScrollBehavior) {\n      smoothScrollBehavior(targetElement, this.options.smoothScroll)\n    } else {\n      targetElement.scrollIntoView({\n        ...this.options.smoothScroll,\n        behavior: 'smooth',\n      })\n    }\n  }\n\n  getMenuItemBySection(section) {\n    if (!section) return\n    const sectionId = section.getAttribute('id')\n    return this.menuList.querySelector(`[${this.options.hrefAttribute}=\"#${sectionId}\"]`)\n  }\n\n  getSectionInView() {\n    for (let i = 0; i < this.sections.length; i++) {\n      const startAt = this.sections[i].offsetTop\n      const endAt = startAt + this.sections[i].offsetHeight\n      let currentPosition = (document.documentElement.scrollTop || document.body.scrollTop) + this.options.offset\n\n      if(this.options.scrollContainer && this.scroller) {\n        currentPosition = (this.scroller.scrollTop) + this.options.offset\n      }\n\n      const isInView = currentPosition > startAt && currentPosition <= endAt\n      if (isInView) return this.sections[i]\n    }\n  }\n\n  setActive(activeItem) {\n    const isActive = activeItem.classList.contains(this.options.activeClass)\n    if (!isActive) {\n      activeItem.classList.add(this.options.activeClass)\n      if (typeof this.options.onActive === 'function') {\n        this.options.onActive(activeItem)\n      }\n    }\n  }\n\n  removeCurrentActive({ ignore }) {\n    const { hrefAttribute, menuActiveTarget, activeClass } = this.options\n    const items = `${menuActiveTarget}.${activeClass}:not([${hrefAttribute}=\"${ignore.getAttribute(hrefAttribute)}\"])`\n    const menuItems = this.menuList.querySelectorAll(items)\n\n    menuItems.forEach((item) => item.classList.remove(this.options.activeClass))\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import scrollSpy from 'simple-scrollspy';\n\nscrollSpy('.rs-scroll-nav', {\n    scrollContainer    : '.rs-scroll-container',\n    sectionClass    : '.rs-scroll-section',\n    menuActiveTarget: '.menu-item',\n    offset          : 100,\n    smoothScroll    : false,\n});\n"],"names":["scrollSpy","scrollContainer","sectionClass","menuActiveTarget","offset","smoothScroll"],"sourceRoot":""}