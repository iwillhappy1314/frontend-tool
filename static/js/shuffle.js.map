{"version":3,"file":"/static/js/shuffle.js","mappings":";;;;;;;;;;;;;;AAAA,mBAAmB;;AAEnB,cAAc;AACd;AACA;;AAEA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,yCAAyC;AACzC;AACA;;AAEA,YAAY,SAAS;AACrB;AACA;;AAEA;AACA,GAAG;AACH;AACA,kCAAkC;AAClC;AACA;;AAEA;AACA,yCAAyC,SAAS;AAClD;AACA;AACA,MAAM;AACN;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,WAAW,GAAG;AACd,YAAY,QAAQ;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,cAAc;AACd;;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA,eAAe,QAAQ;;AAEvB;AACA,eAAe,QAAQ;;AAEvB;AACA,eAAe,QAAQ;;AAEvB;AACA,eAAe,QAAQ;;AAEvB;AACA;AACA;AACA;AACA,aAAa,MAAM;AACnB,aAAa,MAAM;AACnB,cAAc,SAAS;AACvB;;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gCAAgC,YAAY,sBAAsB;AAClE;AACA;AACA;AACA,IAAI,oCAAoC;;AAExC;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA,WAAW,SAAS;AACpB,WAAW,QAAQ;AACnB,WAAW,qBAAqB;AAChC;AACA,YAAY,QAAQ;AACpB;AACA;AACA;;AAEA;AACA;AACA,wCAAwC;;AAExC;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,WAAW,aAAa;AACxB,YAAY;AACZ;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yCAAyC;;AAEzC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,KAAK;AACL,IAAI;AACJ;AACA,IAAI;;;AAGJ;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,YAAY;AACZ;;AAEA;AACA,4CAA4C;AAC5C;AACA;;AAEA;AACA;AACA;AACA,IAAI;;;AAGJ;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,YAAY,gBAAgB;AAC5B;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,wBAAwB;;AAExB,kBAAkB,2BAA2B;AAC7C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,gBAAgB;AAC3B,WAAW,QAAQ;AACnB;AACA,YAAY,QAAQ;AACpB;;AAEA;AACA;;AAEA,0CAA0C,SAAS;AACnD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,gBAAgB;AAC3B,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,yDAAyD;;AAEzD,gFAAgF;AAChF;AACA;;AAEA;;AAEA,kBAAkB,UAAU;AAC5B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,YAAY;AACZ;;AAEA;AACA,qBAAqB;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,GAAG,GAAG;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mFAAmF;;AAEnF;AACA;AACA;AACA,OAAO,GAAG;;AAEV;AACA;AACA;AACA,MAAM;AACN;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,OAAO,IAAI;;AAEX;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG,GAAG;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY,QAAQ;AACpB;AACA;AACA,kDAAkD,iBAAiB;AACnE;;AAEA;AACA;AACA,EAAE;;;AAGF;;AAEA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,yBAAyB,GAAG;AAC5B;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,qEAAqE;;AAErE,sDAAsD;;AAEtD,iCAAiC;AACjC;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,MAAM;;;AAGN;AACA,gEAAgE;;AAEhE,wCAAwC;AACxC;;;AAGA,sCAAsC;;;AAGtC,+DAA+D;;AAE/D,wBAAwB;AACxB;AACA;;AAEA;AACA;;AAEA;AACA,MAAM;AACN;AACA;AACA;;;AAGA,8BAA8B;;AAE9B;AACA,8CAA8C,mBAAmB,KAAK,oBAAoB;AAC1F;AACA;AACA;AACA,aAAa,uBAAuB;AACpC,cAAc,UAAU;AACxB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,MAAM;;;AAGN;AACA;AACA,MAAM;;;AAGN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;;;AAGA;AACA;AACA;AACA;AACA,MAAM;;;AAGN;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,2CAA2C;AACxD;AACA,aAAa,OAAO;AACpB;AACA,eAAe;AACf;AACA;;;AAGA;AACA;AACA;;AAEA,6DAA6D;;;AAG7D,oCAAoC;;;AAGpC,gCAAgC;AAChC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,2CAA2C;AACxD,aAAa,eAAe;AAC5B,eAAe;AACf;AACA;;;AAGA;AACA;AACA,uBAAuB;;AAEvB;AACA,uBAAuB;AACvB;AACA,MAAM;AACN;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,oCAAoC;AACjD,aAAa,SAAS;AACtB,cAAc,SAAS;AACvB;AACA;;;AAGA;AACA;AACA;AACA,MAAM;;;AAGN;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,kBAAkB;AAChC;AACA;;;AAGA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,aAAa,eAAe;AAC5B;AACA;;;AAGA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,aAAa,eAAe;AAC5B;AACA;;;AAGA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,eAAe;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;AACA,MAAM;AACN,wFAAwF;AACxF;;AAEA;AACA;AACA;AACA,iDAAiD,MAAM;AACvD;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,eAAe;AAC5B,cAAc;AACd;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,cAAc;AACd;AACA;;;AAGA;AACA,cAAc;;AAEd;AACA,uDAAuD;AACvD,MAAM;AACN,wDAAwD;AACxD,MAAM;AACN,uCAAuC;AACvC,MAAM;AACN,iEAAiE;AACjE,MAAM;AACN;AACA,MAAM;;;AAGN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,cAAc;AACd;AACA;;;AAGA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;;;AAGA;AACA;;AAEA;;AAEA;;AAEA,qEAAqE;;AAErE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA,mCAAmC,yBAAyB;AAC5D;AACA;AACA;AACA,cAAc;AACd;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,cAAc;AACd;;;AAGA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ,QAAQ;AAC7B;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,eAAe;AAC5B;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6BAA6B;AAC7B;;AAEA;AACA,kCAAkC,8BAA8B;;AAEhE;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,aAAa,eAAe;AAC5B,cAAc;AACd;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,OAAO;AACP;AACA,MAAM;AACN;;;AAGA;AACA;AACA;AACA;AACA,cAAc,gCAAgC;AAC9C,cAAc;AACd;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,cAAc;AACd;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,aAAa,eAAe;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kCAAkC,8BAA8B;;AAEhE;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA,KAAK;AACL;AACA;AACA;AACA,aAAa,uBAAuB;AACpC;;;AAGA;AACA;AACA,2EAA2E,aAAa;AACxF;AACA;AACA,MAAM;AACN;AACA;AACA;;;AAGA;AACA;AACA;AACA,2CAA2C;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,aAAa;AAC1B;AACA,aAAa,QAAQ;AACrB,cAAc,SAAS;AACvB;AACA;;;AAGA;AACA;AACA,qBAAqB;AACrB;;AAEA;AACA;AACA;AACA;AACA,sCAAsC,KAAK,EAAE,EAAE,MAAM,EAAE,YAAY,WAAW;AAC9E,MAAM;AACN;AACA,0BAA0B,aAAa;AACvC,QAAQ;AACR,yBAAyB,aAAa;AACtC;;AAEA,sBAAsB,aAAa;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB,aAAa,UAAU;AACvB,aAAa,UAAU;AACvB;;;AAGA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,cAAc,UAAU;AACxB;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,MAAM;AACN;;AAEA,gDAAgD;AAChD;AACA;;AAEA,MAAM;AACN;AACA,MAAM;;;AAGN;AACA;AACA;AACA;AACA,aAAa,UAAU;AACvB;;;AAGA;AACA;AACA,iCAAiC;;AAEjC;AACA;AACA;;AAEA;AACA;AACA,oDAAoD;;;AAGpD,kCAAkC;;AAElC;AACA;AACA;AACA;AACA,aAAa,UAAU;AACvB;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,2CAA2C;AACxD;AACA,aAAa,aAAa;AAC1B;;;AAGA;AACA;AACA;AACA;;AAEA;AACA,oCAAoC;AACpC;;AAEA,4BAA4B;;;AAG5B,oBAAoB;;;AAGpB,6BAA6B;;;AAG7B;AACA;AACA;AACA;AACA,aAAa,aAAa;AAC1B;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,yBAAyB;AACzB;;;AAGA,0BAA0B;;;AAG1B;;AAEA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,SAAS;AACtB,aAAa,SAAS;AACtB;AACA;;;AAGA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA,QAAQ;;;AAGR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,aAAa,WAAW;AACxB;;;AAGA;AACA,4FAA4F;;AAE5F,4BAA4B;;;AAG5B;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;;AAGA;;AAEA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK,GAAG;;AAER,8BAA8B;AAC9B;;AAEA,oCAAoC;;AAEpC,6CAA6C;;AAE7C;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,WAAW;AACxB;AACA,cAAc,SAAS;AACvB;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,oCAAoC;;;AAGpC;AACA;AACA,OAAO;;AAEP;AACA;AACA,OAAO;AACP,OAAO;;;AAGP;AACA;AACA;AACA,KAAK;;AAEL;;AAEA,iBAAiB;AACjB;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB,cAAc,cAAc;AAC5B;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA,gCAAgC;;AAEhC,mCAAmC;;AAEnC;;AAEA;AACA;AACA;AACA;AACA,KAAK,GAAG;;AAER;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,MAAM;;;AAGN;AACA,2CAA2C;;AAE3C;;AAEA;AACA;AACA,kCAAkC;;AAElC;AACA,yBAAyB;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB,aAAa,SAAS;AACtB,eAAe,gCAAgC;AAC/C;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,WAAW;AACxB,aAAa,UAAU;AACvB;AACA;AACA;;;AAGA;AACA,wBAAwB;;AAExB;AACA;AACA;AACA,QAAQ;AACR;AACA,2CAA2C;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,gBAAgB;;AAEhB,6BAA6B;AAC7B;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;;AAEnB;AACA;AACA;AACA;AACA,WAAW,QAAQ;;AAEnB;AACA,WAAW,QAAQ;;AAEnB;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;;AAErB;AACA;AACA;AACA;AACA;;AAE8B;AAC9B;;;;;;;;;;;ACn4DA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACNA;AAEA,IAAIC,SAAS,GAAG,IAAID,iDAAJ,CAAYE,QAAQ,CAACC,aAAT,CAAuB,wBAAvB,CAAZ,EAA8D;EAC1EC,YAAY,EAAE,mBAD4D;EAE1EC,KAAK,EAAS,oBAF4D;EAG1EC,MAAM,EAAQ;AAH4D,CAA9D,CAAhB;AAMAC,CAAC,CAAC,wBAAD,CAAD,CAA4BC,EAA5B,CAA+B,OAA/B,EAAwC,YAAW;EAC/CD,CAAC,CAAC,wBAAD,CAAD,CAA4BE,WAA5B,CAAwC,QAAxC;EACAF,CAAC,CAAC,IAAD,CAAD,CAAQG,QAAR,CAAiB,QAAjB;EAEAT,SAAS,CAACU,MAAV,CAAiBJ,CAAC,CAAC,IAAD,CAAD,CAAQK,IAAR,CAAa,aAAb,CAAjB;EAEA,OAAO,KAAP;AACH,CAPD,E","sources":["webpack://wenprise-frontend-tool/./node_modules/.pnpm/shufflejs@6.1.0/node_modules/shufflejs/dist/shuffle.esm.js","webpack://wenprise-frontend-tool/external var \"jQuery\"","webpack://wenprise-frontend-tool/webpack/bootstrap","webpack://wenprise-frontend-tool/webpack/runtime/define property getters","webpack://wenprise-frontend-tool/webpack/runtime/hasOwnProperty shorthand","webpack://wenprise-frontend-tool/webpack/runtime/make namespace object","webpack://wenprise-frontend-tool/./assets/scripts/modules/shuffle.js"],"sourcesContent":["var tinyEmitter = {exports: {}};\n\nfunction E() {// Keep this empty so it's easier to inherit from\n  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\n}\n\nE.prototype = {\n  on: function (name, callback, ctx) {\n    var e = this.e || (this.e = {});\n    (e[name] || (e[name] = [])).push({\n      fn: callback,\n      ctx: ctx\n    });\n    return this;\n  },\n  once: function (name, callback, ctx) {\n    var self = this;\n\n    function listener() {\n      self.off(name, listener);\n      callback.apply(ctx, arguments);\n    }\n    listener._ = callback;\n    return this.on(name, listener, ctx);\n  },\n  emit: function (name) {\n    var data = [].slice.call(arguments, 1);\n    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n    var i = 0;\n    var len = evtArr.length;\n\n    for (i; i < len; i++) {\n      evtArr[i].fn.apply(evtArr[i].ctx, data);\n    }\n\n    return this;\n  },\n  off: function (name, callback) {\n    var e = this.e || (this.e = {});\n    var evts = e[name];\n    var liveEvents = [];\n\n    if (evts && callback) {\n      for (var i = 0, len = evts.length; i < len; i++) {\n        if (evts[i].fn !== callback && evts[i].fn._ !== callback) liveEvents.push(evts[i]);\n      }\n    } // Remove event from queue to prevent memory leak\n    // Suggested by https://github.com/lazd\n    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\n\n\n    liveEvents.length ? e[name] = liveEvents : delete e[name];\n    return this;\n  }\n};\ntinyEmitter.exports = E;\ntinyEmitter.exports.TinyEmitter = E;\n\nvar arrayParallel = function parallel(fns, context, callback) {\n  if (!callback) {\n    if (typeof context === 'function') {\n      callback = context;\n      context = null;\n    } else {\n      callback = noop;\n    }\n  }\n\n  var pending = fns && fns.length;\n  if (!pending) return callback(null, []);\n  var finished = false;\n  var results = new Array(pending);\n  fns.forEach(context ? function (fn, i) {\n    fn.call(context, maybeDone(i));\n  } : function (fn, i) {\n    fn(maybeDone(i));\n  });\n\n  function maybeDone(i) {\n    return function (err, result) {\n      if (finished) return;\n\n      if (err) {\n        callback(err, results);\n        finished = true;\n        return;\n      }\n\n      results[i] = result;\n      if (! --pending) callback(null, results);\n    };\n  }\n};\n\nfunction noop() {}\n\n/**\n * Always returns a numeric value, given a value. Logic from jQuery's `isNumeric`.\n * @param {*} value Possibly numeric value.\n * @return {number} `value` or zero if `value` isn't numeric.\n */\nfunction getNumber(value) {\n  return parseFloat(value) || 0;\n}\n\nclass Point {\n  /**\n   * Represents a coordinate pair.\n   * @param {number} [x=0] X.\n   * @param {number} [y=0] Y.\n   */\n  constructor(x, y) {\n    this.x = getNumber(x);\n    this.y = getNumber(y);\n  }\n  /**\n   * Whether two points are equal.\n   * @param {Point} a Point A.\n   * @param {Point} b Point B.\n   * @return {boolean}\n   */\n\n\n  static equals(a, b) {\n    return a.x === b.x && a.y === b.y;\n  }\n\n}\n\nclass Rect {\n  /**\n   * Class for representing rectangular regions.\n   * https://github.com/google/closure-library/blob/master/closure/goog/math/rect.js\n   * @param {number} x Left.\n   * @param {number} y Top.\n   * @param {number} w Width.\n   * @param {number} h Height.\n   * @param {number} id Identifier\n   * @constructor\n   */\n  constructor(x, y, w, h, id) {\n    this.id = id;\n    /** @type {number} */\n\n    this.left = x;\n    /** @type {number} */\n\n    this.top = y;\n    /** @type {number} */\n\n    this.width = w;\n    /** @type {number} */\n\n    this.height = h;\n  }\n  /**\n   * Returns whether two rectangles intersect.\n   * @param {Rect} a A Rectangle.\n   * @param {Rect} b A Rectangle.\n   * @return {boolean} Whether a and b intersect.\n   */\n\n\n  static intersects(a, b) {\n    return a.left < b.left + b.width && b.left < a.left + a.width && a.top < b.top + b.height && b.top < a.top + a.height;\n  }\n\n}\n\nvar Classes = {\n  BASE: 'shuffle',\n  SHUFFLE_ITEM: 'shuffle-item',\n  VISIBLE: 'shuffle-item--visible',\n  HIDDEN: 'shuffle-item--hidden'\n};\n\nlet id$1 = 0;\n\nclass ShuffleItem {\n  constructor(element, isRTL) {\n    id$1 += 1;\n    this.id = id$1;\n    this.element = element;\n    /**\n     * Set correct direction of item\n     */\n\n    this.isRTL = isRTL;\n    /**\n     * Used to separate items for layout and shrink.\n     */\n\n    this.isVisible = true;\n    /**\n     * Used to determine if a transition will happen. By the time the _layout\n     * and _shrink methods get the ShuffleItem instances, the `isVisible` value\n     * has already been changed by the separation methods, so this property is\n     * needed to know if the item was visible/hidden before the shrink/layout.\n     */\n\n    this.isHidden = false;\n  }\n\n  show() {\n    this.isVisible = true;\n    this.element.classList.remove(Classes.HIDDEN);\n    this.element.classList.add(Classes.VISIBLE);\n    this.element.removeAttribute('aria-hidden');\n  }\n\n  hide() {\n    this.isVisible = false;\n    this.element.classList.remove(Classes.VISIBLE);\n    this.element.classList.add(Classes.HIDDEN);\n    this.element.setAttribute('aria-hidden', true);\n  }\n\n  init() {\n    this.addClasses([Classes.SHUFFLE_ITEM, Classes.VISIBLE]);\n    this.applyCss(ShuffleItem.Css.INITIAL);\n    this.applyCss(this.isRTL ? ShuffleItem.Css.DIRECTION.rtl : ShuffleItem.Css.DIRECTION.ltr);\n    this.scale = ShuffleItem.Scale.VISIBLE;\n    this.point = new Point();\n  }\n\n  addClasses(classes) {\n    classes.forEach(className => {\n      this.element.classList.add(className);\n    });\n  }\n\n  removeClasses(classes) {\n    classes.forEach(className => {\n      this.element.classList.remove(className);\n    });\n  }\n\n  applyCss(obj) {\n    Object.keys(obj).forEach(key => {\n      this.element.style[key] = obj[key];\n    });\n  }\n\n  dispose() {\n    this.removeClasses([Classes.HIDDEN, Classes.VISIBLE, Classes.SHUFFLE_ITEM]);\n    this.element.removeAttribute('style');\n    this.element = null;\n  }\n\n}\n\nShuffleItem.Css = {\n  INITIAL: {\n    position: 'absolute',\n    top: 0,\n    visibility: 'visible',\n    willChange: 'transform'\n  },\n  DIRECTION: {\n    ltr: {\n      left: 0\n    },\n    rtl: {\n      right: 0\n    }\n  },\n  VISIBLE: {\n    before: {\n      opacity: 1,\n      visibility: 'visible'\n    },\n    after: {\n      transitionDelay: ''\n    }\n  },\n  HIDDEN: {\n    before: {\n      opacity: 0\n    },\n    after: {\n      visibility: 'hidden',\n      transitionDelay: ''\n    }\n  }\n};\nShuffleItem.Scale = {\n  VISIBLE: 1,\n  HIDDEN: 0.001\n};\n\nlet value = null;\nvar testComputedSize = (() => {\n  if (value !== null) {\n    return value;\n  }\n\n  const element = document.body || document.documentElement;\n  const e = document.createElement('div');\n  e.style.cssText = 'width:10px;padding:2px;box-sizing:border-box;';\n  element.appendChild(e);\n  const {\n    width\n  } = window.getComputedStyle(e, null); // Fix for issue #314\n\n  value = Math.round(getNumber(width)) === 10;\n  element.removeChild(e);\n  return value;\n});\n\n/**\n * Retrieve the computed style for an element, parsed as a float.\n * @param {Element} element Element to get style for.\n * @param {string} style Style property.\n * @param {CSSStyleDeclaration} [styles] Optionally include clean styles to\n *     use instead of asking for them again.\n * @return {number} The parsed computed value or zero if that fails because IE\n *     will return 'auto' when the element doesn't have margins instead of\n *     the computed style.\n */\n\nfunction getNumberStyle(element, style) {\n  let styles = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : window.getComputedStyle(element, null);\n  let value = getNumber(styles[style]); // Support IE<=11 and W3C spec.\n\n  if (!testComputedSize() && style === 'width') {\n    value += getNumber(styles.paddingLeft) + getNumber(styles.paddingRight) + getNumber(styles.borderLeftWidth) + getNumber(styles.borderRightWidth);\n  } else if (!testComputedSize() && style === 'height') {\n    value += getNumber(styles.paddingTop) + getNumber(styles.paddingBottom) + getNumber(styles.borderTopWidth) + getNumber(styles.borderBottomWidth);\n  }\n\n  return value;\n}\n\n/**\n * Fisher-Yates shuffle.\n * http://stackoverflow.com/a/962890/373422\n * https://bost.ocks.org/mike/shuffle/\n * @param {Array} array Array to shuffle.\n * @return {Array} Randomly sorted array.\n */\nfunction randomize(array) {\n  let n = array.length;\n\n  while (n) {\n    n -= 1;\n    const i = Math.floor(Math.random() * (n + 1));\n    const temp = array[i];\n    array[i] = array[n];\n    array[n] = temp;\n  }\n\n  return array;\n}\n\nconst defaults = {\n  // Use array.reverse() to reverse the results\n  reverse: false,\n  // Sorting function\n  by: null,\n  // Custom sort function\n  compare: null,\n  // If true, this will skip the sorting and return a randomized order in the array\n  randomize: false,\n  // Determines which property of each item in the array is passed to the\n  // sorting method.\n  key: 'element'\n};\n/**\n * You can return `undefined` from the `by` function to revert to DOM order.\n * @param {Array<T>} arr Array to sort.\n * @param {SortOptions} options Sorting options.\n * @return {Array<T>}\n */\n\nfunction sorter(arr, options) {\n  const opts = { ...defaults,\n    ...options\n  };\n  const original = Array.from(arr);\n  let revert = false;\n\n  if (!arr.length) {\n    return [];\n  }\n\n  if (opts.randomize) {\n    return randomize(arr);\n  } // Sort the elements by the opts.by function.\n  // If we don't have opts.by, default to DOM order\n\n\n  if (typeof opts.by === 'function') {\n    arr.sort((a, b) => {\n      // Exit early if we already know we want to revert\n      if (revert) {\n        return 0;\n      }\n\n      const valA = opts.by(a[opts.key]);\n      const valB = opts.by(b[opts.key]); // If both values are undefined, use the DOM order\n\n      if (valA === undefined && valB === undefined) {\n        revert = true;\n        return 0;\n      }\n\n      if (valA < valB || valA === 'sortFirst' || valB === 'sortLast') {\n        return -1;\n      }\n\n      if (valA > valB || valA === 'sortLast' || valB === 'sortFirst') {\n        return 1;\n      }\n\n      return 0;\n    });\n  } else if (typeof opts.compare === 'function') {\n    arr.sort(opts.compare);\n  } // Revert to the original array if necessary\n\n\n  if (revert) {\n    return original;\n  }\n\n  if (opts.reverse) {\n    arr.reverse();\n  }\n\n  return arr;\n}\n\nconst transitions = {};\nconst eventName = 'transitionend';\nlet count = 0;\n\nfunction uniqueId() {\n  count += 1;\n  return eventName + count;\n}\n\nfunction cancelTransitionEnd(id) {\n  if (transitions[id]) {\n    transitions[id].element.removeEventListener(eventName, transitions[id].listener);\n    transitions[id] = null;\n    return true;\n  }\n\n  return false;\n}\nfunction onTransitionEnd(element, callback) {\n  const id = uniqueId();\n\n  const listener = evt => {\n    if (evt.currentTarget === evt.target) {\n      cancelTransitionEnd(id);\n      callback(evt);\n    }\n  };\n\n  element.addEventListener(eventName, listener);\n  transitions[id] = {\n    element,\n    listener\n  };\n  return id;\n}\n\nfunction arrayMax(array) {\n  return Math.max(...array);\n}\n\nfunction arrayMin(array) {\n  return Math.min(...array);\n}\n\n/**\n * Determine the number of columns an items spans.\n * @param {number} itemWidth Width of the item.\n * @param {number} columnWidth Width of the column (includes gutter).\n * @param {number} columns Total number of columns\n * @param {number} threshold A buffer value for the size of the column to fit.\n * @return {number}\n */\n\nfunction getColumnSpan(itemWidth, columnWidth, columns, threshold) {\n  let columnSpan = itemWidth / columnWidth; // If the difference between the rounded column span number and the\n  // calculated column span number is really small, round the number to\n  // make it fit.\n\n  if (Math.abs(Math.round(columnSpan) - columnSpan) < threshold) {\n    // e.g. columnSpan = 4.0089945390298745\n    columnSpan = Math.round(columnSpan);\n  } // Ensure the column span is not more than the amount of columns in the whole layout.\n\n\n  return Math.min(Math.ceil(columnSpan), columns);\n}\n/**\n * Retrieves the column set to use for placement.\n * @param {number} columnSpan The number of columns this current item spans.\n * @param {number} columns The total columns in the grid.\n * @return {Array.<number>} An array of numbers represeting the column set.\n */\n\nfunction getAvailablePositions(positions, columnSpan, columns) {\n  // The item spans only one column.\n  if (columnSpan === 1) {\n    return positions;\n  } // The item spans more than one column, figure out how many different\n  // places it could fit horizontally.\n  // The group count is the number of places within the positions this block\n  // could fit, ignoring the current positions of items.\n  // Imagine a 2 column brick as the second item in a 4 column grid with\n  // 10px height each. Find the places it would fit:\n  // [20, 10, 10, 0]\n  //  |   |   |\n  //  *   *   *\n  //\n  // Then take the places which fit and get the bigger of the two:\n  // max([20, 10]), max([10, 10]), max([10, 0]) = [20, 10, 10]\n  //\n  // Next, find the first smallest number (the short column).\n  // [20, 10, 10]\n  //      |\n  //      *\n  //\n  // And that's where it should be placed!\n  //\n  // Another example where the second column's item extends past the first:\n  // [10, 20, 10, 0] => [20, 20, 10] => 10\n\n\n  const available = []; // For how many possible positions for this item there are.\n\n  for (let i = 0; i <= columns - columnSpan; i++) {\n    // Find the bigger value for each place it could fit.\n    available.push(arrayMax(positions.slice(i, i + columnSpan)));\n  }\n\n  return available;\n}\n/**\n * Find index of short column, the first from the left where this item will go.\n *\n * @param {Array.<number>} positions The array to search for the smallest number.\n * @param {number} buffer Optional buffer which is very useful when the height\n *     is a percentage of the width.\n * @return {number} Index of the short column.\n */\n\nfunction getShortColumn(positions, buffer) {\n  const minPosition = arrayMin(positions);\n\n  for (let i = 0, len = positions.length; i < len; i++) {\n    if (positions[i] >= minPosition - buffer && positions[i] <= minPosition + buffer) {\n      return i;\n    }\n  }\n\n  return 0;\n}\n/**\n * Determine the location of the next item, based on its size.\n * @param {Object} itemSize Object with width and height.\n * @param {Array.<number>} positions Positions of the other current items.\n * @param {number} gridSize The column width or row height.\n * @param {number} total The total number of columns or rows.\n * @param {number} threshold Buffer value for the column to fit.\n * @param {number} buffer Vertical buffer for the height of items.\n * @return {Point}\n */\n\nfunction getItemPosition(_ref) {\n  let {\n    itemSize,\n    positions,\n    gridSize,\n    total,\n    threshold,\n    buffer\n  } = _ref;\n  const span = getColumnSpan(itemSize.width, gridSize, total, threshold);\n  const setY = getAvailablePositions(positions, span, total);\n  const shortColumnIndex = getShortColumn(setY, buffer); // Position the item\n\n  const point = new Point(gridSize * shortColumnIndex, setY[shortColumnIndex]); // Update the columns array with the new values for each column.\n  // e.g. before the update the columns could be [250, 0, 0, 0] for an item\n  // which spans 2 columns. After it would be [250, itemHeight, itemHeight, 0].\n\n  const setHeight = setY[shortColumnIndex] + itemSize.height;\n\n  for (let i = 0; i < span; i++) {\n    positions[shortColumnIndex + i] = setHeight;\n  }\n\n  return point;\n}\n/**\n * This method attempts to center items. This method could potentially be slow\n * with a large number of items because it must place items, then check every\n * previous item to ensure there is no overlap.\n * @param {Array.<Rect>} itemRects Item data objects.\n * @param {number} containerWidth Width of the containing element.\n * @return {Array.<Point>}\n */\n\nfunction getCenteredPositions(itemRects, containerWidth) {\n  const rowMap = {}; // Populate rows by their offset because items could jump between rows like:\n  // a   c\n  //  bbb\n\n  itemRects.forEach(itemRect => {\n    if (rowMap[itemRect.top]) {\n      // Push the point to the last row array.\n      rowMap[itemRect.top].push(itemRect);\n    } else {\n      // Start of a new row.\n      rowMap[itemRect.top] = [itemRect];\n    }\n  }); // For each row, find the end of the last item, then calculate\n  // the remaining space by dividing it by 2. Then add that\n  // offset to the x position of each point.\n\n  let rects = [];\n  const rows = [];\n  const centeredRows = [];\n  Object.keys(rowMap).forEach(key => {\n    const itemRects = rowMap[key];\n    rows.push(itemRects);\n    const lastItem = itemRects[itemRects.length - 1];\n    const end = lastItem.left + lastItem.width;\n    const offset = Math.round((containerWidth - end) / 2);\n    let finalRects = itemRects;\n    let canMove = false;\n\n    if (offset > 0) {\n      const newRects = [];\n      canMove = itemRects.every(r => {\n        const newRect = new Rect(r.left + offset, r.top, r.width, r.height, r.id); // Check all current rects to make sure none overlap.\n\n        const noOverlap = !rects.some(r => Rect.intersects(newRect, r));\n        newRects.push(newRect);\n        return noOverlap;\n      }); // If none of the rectangles overlapped, the whole group can be centered.\n\n      if (canMove) {\n        finalRects = newRects;\n      }\n    } // If the items are not going to be offset, ensure that the original\n    // placement for this row will not overlap previous rows (row-spanning\n    // elements could be in the way).\n\n\n    if (!canMove) {\n      let intersectingRect;\n      const hasOverlap = itemRects.some(itemRect => rects.some(r => {\n        const intersects = Rect.intersects(itemRect, r);\n\n        if (intersects) {\n          intersectingRect = r;\n        }\n\n        return intersects;\n      })); // If there is any overlap, replace the overlapping row with the original.\n\n      if (hasOverlap) {\n        const rowIndex = centeredRows.findIndex(items => items.includes(intersectingRect));\n        centeredRows.splice(rowIndex, 1, rows[rowIndex]);\n      }\n    }\n\n    rects = rects.concat(finalRects);\n    centeredRows.push(finalRects);\n  }); // Reduce array of arrays to a single array of points.\n  // https://stackoverflow.com/a/10865042/373422\n  // Then reset sort back to how the items were passed to this method.\n  // Remove the wrapper object with index, map to a Point.\n\n  return centeredRows.flat().sort((a, b) => a.id - b.id).map(itemRect => new Point(itemRect.left, itemRect.top));\n}\n\n/**\n * Hyphenates a javascript style string to a css one. For example:\n * MozBoxSizing -> -moz-box-sizing.\n * @param {string} str The string to hyphenate.\n * @return {string} The hyphenated string.\n */\nfunction hyphenate(str) {\n  return str.replace(/([A-Z])/g, (str, m1) => `-${m1.toLowerCase()}`);\n}\n\nfunction arrayUnique(x) {\n  return Array.from(new Set(x));\n} // Used for unique instance variables\n\n\nlet id = 0;\n\nclass Shuffle extends tinyEmitter.exports {\n  /**\n   * Categorize, sort, and filter a responsive grid of items.\n   *\n   * @param {Element} element An element which is the parent container for the grid items.\n   * @param {Object} [options=Shuffle.options] Options object.\n   * @constructor\n   */\n  constructor(element) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super();\n    this.options = { ...Shuffle.options,\n      ...options\n    };\n    this.lastSort = {};\n    this.group = Shuffle.ALL_ITEMS;\n    this.lastFilter = Shuffle.ALL_ITEMS;\n    this.isEnabled = true;\n    this.isDestroyed = false;\n    this.isInitialized = false;\n    this._transitions = [];\n    this.isTransitioning = false;\n    this._queue = [];\n\n    const el = this._getElementOption(element);\n\n    if (!el) {\n      throw new TypeError('Shuffle needs to be initialized with an element.');\n    }\n\n    this.element = el;\n    this.id = `shuffle_${id}`;\n    id += 1;\n\n    this._init();\n\n    this.isInitialized = true;\n  }\n\n  _init() {\n    this.items = this._getItems();\n    this.sortedItems = this.items;\n    this.options.sizer = this._getElementOption(this.options.sizer); // Add class and invalidate styles\n\n    this.element.classList.add(Shuffle.Classes.BASE); // Set initial css for each item\n\n    this._initItems(this.items); // If the page has not already emitted the `load` event, call layout on load.\n    // This avoids layout issues caused by images and fonts loading after the\n    // instance has been initialized.\n\n\n    if (document.readyState !== 'complete') {\n      const layout = this.layout.bind(this);\n      window.addEventListener('load', function onLoad() {\n        window.removeEventListener('load', onLoad);\n        layout();\n      });\n    } // Get container css all in one request. Causes reflow\n\n\n    const containerCss = window.getComputedStyle(this.element, null);\n    const containerWidth = Shuffle.getSize(this.element).width; // Add styles to the container if it doesn't have them.\n\n    this._validateStyles(containerCss); // We already got the container's width above, no need to cause another\n    // reflow getting it again... Calculate the number of columns there will be\n\n\n    this._setColumns(containerWidth); // Kick off!\n\n\n    this.filter(this.options.group, this.options.initialSort); // Bind resize events\n\n    this._rafId = null; // This is true for all supported browsers, but just to be safe, avoid throwing\n    // an error if ResizeObserver is not present. You can manually add a window resize\n    // event and call `update()` if ResizeObserver is missing, or use Shuffle v5.\n\n    if ('ResizeObserver' in window) {\n      this._resizeObserver = new ResizeObserver(this._handleResizeCallback.bind(this));\n\n      this._resizeObserver.observe(this.element);\n    } // The shuffle items haven't had transitions set on them yet so the user\n    // doesn't see the first layout. Set them now that the first layout is done.\n    // First, however, a synchronous layout must be caused for the previous\n    // styles to be applied without transitions.\n\n\n    this.element.offsetWidth; // eslint-disable-line no-unused-expressions\n\n    this.setItemTransitions(this.items);\n    this.element.style.transition = `height ${this.options.speed}ms ${this.options.easing}`;\n  }\n  /**\n   * Retrieve an element from an option.\n   * @param {string|jQuery|Element} option The option to check.\n   * @return {?Element} The plain element or null.\n   * @private\n   */\n\n\n  _getElementOption(option) {\n    // If column width is a string, treat is as a selector and search for the\n    // sizer element within the outermost container\n    if (typeof option === 'string') {\n      return this.element.querySelector(option);\n    } // Check for an element\n\n\n    if (option && option.nodeType && option.nodeType === 1) {\n      return option;\n    } // Check for jQuery object\n\n\n    if (option && option.jquery) {\n      return option[0];\n    }\n\n    return null;\n  }\n  /**\n   * Ensures the shuffle container has the css styles it needs applied to it.\n   * @param {Object} styles Key value pairs for position and overflow.\n   * @private\n   */\n\n\n  _validateStyles(styles) {\n    // Position cannot be static.\n    if (styles.position === 'static') {\n      this.element.style.position = 'relative';\n    } // Overflow has to be hidden.\n\n\n    if (styles.overflow !== 'hidden') {\n      this.element.style.overflow = 'hidden';\n    }\n  }\n  /**\n   * Filter the elements by a category.\n   * @param {string|string[]|function(Element):boolean} [category] Category to\n   *     filter by. If it's given, the last category will be used to filter the items.\n   * @param {Array} [collection] Optionally filter a collection. Defaults to\n   *     all the items.\n   * @return {{visible: ShuffleItem[], hidden: ShuffleItem[]}}\n   * @private\n   */\n\n\n  _filter() {\n    let category = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.lastFilter;\n    let collection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.items;\n\n    const set = this._getFilteredSets(category, collection); // Individually add/remove hidden/visible classes\n\n\n    this._toggleFilterClasses(set); // Save the last filter in case elements are appended.\n\n\n    this.lastFilter = category; // This is saved mainly because providing a filter function (like searching)\n    // will overwrite the `lastFilter` property every time its called.\n\n    if (typeof category === 'string') {\n      this.group = category;\n    }\n\n    return set;\n  }\n  /**\n   * Returns an object containing the visible and hidden elements.\n   * @param {string|string[]|function(Element):boolean} category Category or function to filter by.\n   * @param {ShuffleItem[]} items A collection of items to filter.\n   * @return {{visible: ShuffleItem[], hidden: ShuffleItem[]}}\n   * @private\n   */\n\n\n  _getFilteredSets(category, items) {\n    let visible = [];\n    const hidden = []; // category === 'all', add visible class to everything\n\n    if (category === Shuffle.ALL_ITEMS) {\n      visible = items; // Loop through each item and use provided function to determine\n      // whether to hide it or not.\n    } else {\n      items.forEach(item => {\n        if (this._doesPassFilter(category, item.element)) {\n          visible.push(item);\n        } else {\n          hidden.push(item);\n        }\n      });\n    }\n\n    return {\n      visible,\n      hidden\n    };\n  }\n  /**\n   * Test an item to see if it passes a category.\n   * @param {string|string[]|function():boolean} category Category or function to filter by.\n   * @param {Element} element An element to test.\n   * @return {boolean} Whether it passes the category/filter.\n   * @private\n   */\n\n\n  _doesPassFilter(category, element) {\n    if (typeof category === 'function') {\n      return category.call(element, element, this);\n    } // Check each element's data-groups attribute against the given category.\n\n\n    const attr = element.dataset[Shuffle.FILTER_ATTRIBUTE_KEY];\n    const keys = this.options.delimiter ? attr.split(this.options.delimiter) : JSON.parse(attr);\n\n    function testCategory(category) {\n      return keys.includes(category);\n    }\n\n    if (Array.isArray(category)) {\n      if (this.options.filterMode === Shuffle.FilterMode.ANY) {\n        return category.some(testCategory);\n      }\n\n      return category.every(testCategory);\n    }\n\n    return keys.includes(category);\n  }\n  /**\n   * Toggles the visible and hidden class names.\n   * @param {{visible, hidden}} Object with visible and hidden arrays.\n   * @private\n   */\n\n\n  _toggleFilterClasses(_ref) {\n    let {\n      visible,\n      hidden\n    } = _ref;\n    visible.forEach(item => {\n      item.show();\n    });\n    hidden.forEach(item => {\n      item.hide();\n    });\n  }\n  /**\n   * Set the initial css for each item\n   * @param {ShuffleItem[]} items Set to initialize.\n   * @private\n   */\n\n\n  _initItems(items) {\n    items.forEach(item => {\n      item.init();\n    });\n  }\n  /**\n   * Remove element reference and styles.\n   * @param {ShuffleItem[]} items Set to dispose.\n   * @private\n   */\n\n\n  _disposeItems(items) {\n    items.forEach(item => {\n      item.dispose();\n    });\n  }\n  /**\n   * Updates the visible item count.\n   * @private\n   */\n\n\n  _updateItemCount() {\n    this.visibleItems = this._getFilteredItems().length;\n  }\n  /**\n   * Sets css transform transition on a group of elements. This is not executed\n   * at the same time as `item.init` so that transitions don't occur upon\n   * initialization of a new Shuffle instance.\n   * @param {ShuffleItem[]} items Shuffle items to set transitions on.\n   * @protected\n   */\n\n\n  setItemTransitions(items) {\n    const {\n      speed,\n      easing\n    } = this.options;\n    const positionProps = this.options.useTransforms ? ['transform'] : ['top', 'left']; // Allow users to transtion other properties if they exist in the `before`\n    // css mapping of the shuffle item.\n\n    const cssProps = Object.keys(ShuffleItem.Css.HIDDEN.before).map(k => hyphenate(k));\n    const properties = positionProps.concat(cssProps).join();\n    items.forEach(item => {\n      item.element.style.transitionDuration = `${speed}ms`;\n      item.element.style.transitionTimingFunction = easing;\n      item.element.style.transitionProperty = properties;\n    });\n  }\n\n  _getItems() {\n    return Array.from(this.element.children).filter(el => el.matches(this.options.itemSelector)).map(el => new ShuffleItem(el, this.options.isRTL));\n  }\n  /**\n   * Combine the current items array with a new one and sort it by DOM order.\n   * @param {ShuffleItem[]} items Items to track.\n   * @return {ShuffleItem[]}\n   */\n\n\n  _mergeNewItems(items) {\n    const children = Array.from(this.element.children);\n    return sorter(this.items.concat(items), {\n      by(element) {\n        return children.indexOf(element);\n      }\n\n    });\n  }\n\n  _getFilteredItems() {\n    return this.items.filter(item => item.isVisible);\n  }\n\n  _getConcealedItems() {\n    return this.items.filter(item => !item.isVisible);\n  }\n  /**\n   * Returns the column size, based on column width and sizer options.\n   * @param {number} containerWidth Size of the parent container.\n   * @param {number} gutterSize Size of the gutters.\n   * @return {number}\n   * @private\n   */\n\n\n  _getColumnSize(containerWidth, gutterSize) {\n    let size; // If the columnWidth property is a function, then the grid is fluid\n\n    if (typeof this.options.columnWidth === 'function') {\n      size = this.options.columnWidth(containerWidth); // columnWidth option isn't a function, are they using a sizing element?\n    } else if (this.options.sizer) {\n      size = Shuffle.getSize(this.options.sizer).width; // if not, how about the explicitly set option?\n    } else if (this.options.columnWidth) {\n      size = this.options.columnWidth; // or use the size of the first item\n    } else if (this.items.length > 0) {\n      size = Shuffle.getSize(this.items[0].element, true).width; // if there's no items, use size of container\n    } else {\n      size = containerWidth;\n    } // Don't let them set a column width of zero.\n\n\n    if (size === 0) {\n      size = containerWidth;\n    }\n\n    return size + gutterSize;\n  }\n  /**\n   * Returns the gutter size, based on gutter width and sizer options.\n   * @param {number} containerWidth Size of the parent container.\n   * @return {number}\n   * @private\n   */\n\n\n  _getGutterSize(containerWidth) {\n    let size;\n\n    if (typeof this.options.gutterWidth === 'function') {\n      size = this.options.gutterWidth(containerWidth);\n    } else if (this.options.sizer) {\n      size = getNumberStyle(this.options.sizer, 'marginLeft');\n    } else {\n      size = this.options.gutterWidth;\n    }\n\n    return size;\n  }\n  /**\n   * Calculate the number of columns to be used. Gets css if using sizer element.\n   * @param {number} [containerWidth] Optionally specify a container width if\n   *    it's already available.\n   */\n\n\n  _setColumns() {\n    let containerWidth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Shuffle.getSize(this.element).width;\n\n    const gutter = this._getGutterSize(containerWidth);\n\n    const columnWidth = this._getColumnSize(containerWidth, gutter);\n\n    let calculatedColumns = (containerWidth + gutter) / columnWidth; // Widths given from getStyles are not precise enough...\n\n    if (Math.abs(Math.round(calculatedColumns) - calculatedColumns) < this.options.columnThreshold) {\n      // e.g. calculatedColumns = 11.998876\n      calculatedColumns = Math.round(calculatedColumns);\n    }\n\n    this.cols = Math.max(Math.floor(calculatedColumns || 0), 1);\n    this.containerWidth = containerWidth;\n    this.colWidth = columnWidth;\n  }\n  /**\n   * Adjust the height of the grid\n   */\n\n\n  _setContainerSize() {\n    this.element.style.height = `${this._getContainerSize()}px`;\n  }\n  /**\n   * Based on the column heights, it returns the biggest one.\n   * @return {number}\n   * @private\n   */\n\n\n  _getContainerSize() {\n    return arrayMax(this.positions);\n  }\n  /**\n   * Get the clamped stagger amount.\n   * @param {number} index Index of the item to be staggered.\n   * @return {number}\n   */\n\n\n  _getStaggerAmount(index) {\n    return Math.min(index * this.options.staggerAmount, this.options.staggerAmountMax);\n  }\n  /**\n   * Emit an event from this instance.\n   * @param {string} name Event name.\n   * @param {Object} [data={}] Optional object data.\n   */\n\n\n  _dispatch(name) {\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (this.isDestroyed) {\n      return;\n    }\n\n    data.shuffle = this;\n    this.emit(name, data);\n  }\n  /**\n   * Zeros out the y columns array, which is used to determine item placement.\n   * @private\n   */\n\n\n  _resetCols() {\n    let i = this.cols;\n    this.positions = [];\n\n    while (i) {\n      i -= 1;\n      this.positions.push(0);\n    }\n  }\n  /**\n   * Loops through each item that should be shown and calculates the x, y position.\n   * @param {ShuffleItem[]} items Array of items that will be shown/layed\n   *     out in order in their array.\n   */\n\n\n  _layout(items) {\n    const itemPositions = this._getNextPositions(items);\n\n    let count = 0;\n    items.forEach((item, i) => {\n      function callback() {\n        item.applyCss(ShuffleItem.Css.VISIBLE.after);\n      } // If the item will not change its position, do not add it to the render\n      // queue. Transitions don't fire when setting a property to the same value.\n\n\n      if (Point.equals(item.point, itemPositions[i]) && !item.isHidden) {\n        item.applyCss(ShuffleItem.Css.VISIBLE.before);\n        callback();\n        return;\n      }\n\n      item.point = itemPositions[i];\n      item.scale = ShuffleItem.Scale.VISIBLE;\n      item.isHidden = false; // Clone the object so that the `before` object isn't modified when the\n      // transition delay is added.\n\n      const styles = this.getStylesForTransition(item, ShuffleItem.Css.VISIBLE.before);\n      styles.transitionDelay = `${this._getStaggerAmount(count)}ms`;\n\n      this._queue.push({\n        item,\n        styles,\n        callback\n      });\n\n      count += 1;\n    });\n  }\n  /**\n   * Return an array of Point instances representing the future positions of\n   * each item.\n   * @param {ShuffleItem[]} items Array of sorted shuffle items.\n   * @return {Point[]}\n   * @private\n   */\n\n\n  _getNextPositions(items) {\n    // If position data is going to be changed, add the item's size to the\n    // transformer to allow for calculations.\n    if (this.options.isCentered) {\n      const itemsData = items.map((item, i) => {\n        const itemSize = Shuffle.getSize(item.element, true);\n\n        const point = this._getItemPosition(itemSize);\n\n        return new Rect(point.x, point.y, itemSize.width, itemSize.height, i);\n      });\n      return this.getTransformedPositions(itemsData, this.containerWidth);\n    } // If no transforms are going to happen, simply return an array of the\n    // future points of each item.\n\n\n    return items.map(item => this._getItemPosition(Shuffle.getSize(item.element, true)));\n  }\n  /**\n   * Determine the location of the next item, based on its size.\n   * @param {{width: number, height: number}} itemSize Object with width and height.\n   * @return {Point}\n   * @private\n   */\n\n\n  _getItemPosition(itemSize) {\n    return getItemPosition({\n      itemSize,\n      positions: this.positions,\n      gridSize: this.colWidth,\n      total: this.cols,\n      threshold: this.options.columnThreshold,\n      buffer: this.options.buffer\n    });\n  }\n  /**\n   * Mutate positions before they're applied.\n   * @param {Rect[]} itemRects Item data objects.\n   * @param {number} containerWidth Width of the containing element.\n   * @return {Point[]}\n   * @protected\n   */\n\n\n  getTransformedPositions(itemRects, containerWidth) {\n    return getCenteredPositions(itemRects, containerWidth);\n  }\n  /**\n   * Hides the elements that don't match our filter.\n   * @param {ShuffleItem[]} collection Collection to shrink.\n   * @private\n   */\n\n\n  _shrink() {\n    let collection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._getConcealedItems();\n    let count = 0;\n    collection.forEach(item => {\n      function callback() {\n        item.applyCss(ShuffleItem.Css.HIDDEN.after);\n      } // Continuing would add a transitionend event listener to the element, but\n      // that listener would not execute because the transform and opacity would\n      // stay the same.\n      // The callback is executed here because it is not guaranteed to be called\n      // after the transitionend event because the transitionend could be\n      // canceled if another animation starts.\n\n\n      if (item.isHidden) {\n        item.applyCss(ShuffleItem.Css.HIDDEN.before);\n        callback();\n        return;\n      }\n\n      item.scale = ShuffleItem.Scale.HIDDEN;\n      item.isHidden = true;\n      const styles = this.getStylesForTransition(item, ShuffleItem.Css.HIDDEN.before);\n      styles.transitionDelay = `${this._getStaggerAmount(count)}ms`;\n\n      this._queue.push({\n        item,\n        styles,\n        callback\n      });\n\n      count += 1;\n    });\n  }\n  /**\n   * Resize handler.\n   * @param {ResizeObserverEntry[]} entries\n   */\n\n\n  _handleResizeCallback(entries) {\n    // If shuffle is disabled, destroyed, don't do anything.\n    // You can still manually force a shuffle update with shuffle.update({ force: true }).\n    if (!this.isEnabled || this.isDestroyed) {\n      return;\n    } // The reason ESLint disables this is because for..of generates a lot of extra\n    // code using Babel, but Shuffle no longer supports browsers that old, so\n    // nothing to worry about.\n    // eslint-disable-next-line no-restricted-syntax\n\n\n    for (const entry of entries) {\n      if (Math.round(entry.contentRect.width) !== Math.round(this.containerWidth)) {\n        // If there was already an animation waiting, cancel it.\n        cancelAnimationFrame(this._rafId); // Offload updating the DOM until the browser is ready.\n\n        this._rafId = requestAnimationFrame(this.update.bind(this));\n      }\n    }\n  }\n  /**\n   * Returns styles which will be applied to the an item for a transition.\n   * @param {ShuffleItem} item Item to get styles for. Should have updated\n   *   scale and point properties.\n   * @param {Object} styleObject Extra styles that will be used in the transition.\n   * @return {!Object} Transforms for transitions, left/top for animate.\n   * @protected\n   */\n\n\n  getStylesForTransition(item, styleObject) {\n    // Clone the object to avoid mutating the original.\n    const styles = { ...styleObject\n    };\n\n    if (this.options.useTransforms) {\n      const sign = this.options.isRTL ? '-' : '';\n      const x = this.options.roundTransforms ? Math.round(item.point.x) : item.point.x;\n      const y = this.options.roundTransforms ? Math.round(item.point.y) : item.point.y;\n      styles.transform = `translate(${sign}${x}px, ${y}px) scale(${item.scale})`;\n    } else {\n      if (this.options.isRTL) {\n        styles.right = `${item.point.x}px`;\n      } else {\n        styles.left = `${item.point.x}px`;\n      }\n\n      styles.top = `${item.point.y}px`;\n    }\n\n    return styles;\n  }\n  /**\n   * Listen for the transition end on an element and execute the itemCallback\n   * when it finishes.\n   * @param {Element} element Element to listen on.\n   * @param {function} itemCallback Callback for the item.\n   * @param {function} done Callback to notify `parallel` that this one is done.\n   */\n\n\n  _whenTransitionDone(element, itemCallback, done) {\n    const id = onTransitionEnd(element, evt => {\n      itemCallback();\n      done(null, evt);\n    });\n\n    this._transitions.push(id);\n  }\n  /**\n   * Return a function which will set CSS styles and call the `done` function\n   * when (if) the transition finishes.\n   * @param {Object} opts Transition object.\n   * @return {function} A function to be called with a `done` function.\n   */\n\n\n  _getTransitionFunction(opts) {\n    return done => {\n      opts.item.applyCss(opts.styles);\n\n      this._whenTransitionDone(opts.item.element, opts.callback, done);\n    };\n  }\n  /**\n   * Execute the styles gathered in the style queue. This applies styles to elements,\n   * triggering transitions.\n   * @private\n   */\n\n\n  _processQueue() {\n    if (this.isTransitioning) {\n      this._cancelMovement();\n    }\n\n    const hasSpeed = this.options.speed > 0;\n    const hasQueue = this._queue.length > 0;\n\n    if (hasQueue && hasSpeed && this.isInitialized) {\n      this._startTransitions(this._queue);\n    } else if (hasQueue) {\n      this._styleImmediately(this._queue);\n\n      this._dispatch(Shuffle.EventType.LAYOUT); // A call to layout happened, but none of the newly visible items will\n      // change position or the transition duration is zero, which will not trigger\n      // the transitionend event.\n\n    } else {\n      this._dispatch(Shuffle.EventType.LAYOUT);\n    } // Remove everything in the style queue\n\n\n    this._queue.length = 0;\n  }\n  /**\n   * Wait for each transition to finish, the emit the layout event.\n   * @param {Object[]} transitions Array of transition objects.\n   */\n\n\n  _startTransitions(transitions) {\n    // Set flag that shuffle is currently in motion.\n    this.isTransitioning = true; // Create an array of functions to be called.\n\n    const callbacks = transitions.map(obj => this._getTransitionFunction(obj));\n    arrayParallel(callbacks, this._movementFinished.bind(this));\n  }\n\n  _cancelMovement() {\n    // Remove the transition end event for each listener.\n    this._transitions.forEach(cancelTransitionEnd); // Reset the array.\n\n\n    this._transitions.length = 0; // Show it's no longer active.\n\n    this.isTransitioning = false;\n  }\n  /**\n   * Apply styles without a transition.\n   * @param {Object[]} objects Array of transition objects.\n   * @private\n   */\n\n\n  _styleImmediately(objects) {\n    if (objects.length) {\n      const elements = objects.map(obj => obj.item.element);\n\n      Shuffle._skipTransitions(elements, () => {\n        objects.forEach(obj => {\n          obj.item.applyCss(obj.styles);\n          obj.callback();\n        });\n      });\n    }\n  }\n\n  _movementFinished() {\n    this._transitions.length = 0;\n    this.isTransitioning = false;\n\n    this._dispatch(Shuffle.EventType.LAYOUT);\n  }\n  /**\n   * The magic. This is what makes the plugin 'shuffle'\n   * @param {string|string[]|function(Element):boolean} [category] Category to filter by.\n   *     Can be a function, string, or array of strings.\n   * @param {SortOptions} [sortOptions] A sort object which can sort the visible set\n   */\n\n\n  filter(category, sortOptions) {\n    if (!this.isEnabled) {\n      return;\n    }\n\n    if (!category || category && category.length === 0) {\n      category = Shuffle.ALL_ITEMS; // eslint-disable-line no-param-reassign\n    }\n\n    this._filter(category); // Shrink each hidden item\n\n\n    this._shrink(); // How many visible elements?\n\n\n    this._updateItemCount(); // Update transforms on visible elements so they will animate to their new positions.\n\n\n    this.sort(sortOptions);\n  }\n  /**\n   * Gets the visible elements, sorts them, and passes them to layout.\n   * @param {SortOptions} [sortOptions] The options object to pass to `sorter`.\n   */\n\n\n  sort() {\n    let sortOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.lastSort;\n\n    if (!this.isEnabled) {\n      return;\n    }\n\n    this._resetCols();\n\n    const items = sorter(this._getFilteredItems(), sortOptions);\n    this.sortedItems = items;\n\n    this._layout(items); // `_layout` always happens after `_shrink`, so it's safe to process the style\n    // queue here with styles from the shrink method.\n\n\n    this._processQueue(); // Adjust the height of the container.\n\n\n    this._setContainerSize();\n\n    this.lastSort = sortOptions;\n  }\n  /**\n   * Reposition everything.\n   * @param {object} options options object\n   * @param {boolean} [options.recalculateSizes=true] Whether to calculate column, gutter, and container widths again.\n   * @param {boolean} [options.force=false] By default, `update` does nothing if the instance is disabled. Setting this\n   *    to true forces the update to happen regardless.\n   */\n\n\n  update() {\n    let {\n      recalculateSizes = true,\n      force = false\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (this.isEnabled || force) {\n      if (recalculateSizes) {\n        this._setColumns();\n      } // Layout items\n\n\n      this.sort();\n    }\n  }\n  /**\n   * Use this instead of `update()` if you don't need the columns and gutters updated\n   * Maybe an image inside `shuffle` loaded (and now has a height), which means calculations\n   * could be off.\n   */\n\n\n  layout() {\n    this.update({\n      recalculateSizes: true\n    });\n  }\n  /**\n   * New items have been appended to shuffle. Mix them in with the current\n   * filter or sort status.\n   * @param {Element[]} newItems Collection of new items.\n   */\n\n\n  add(newItems) {\n    const items = arrayUnique(newItems).map(el => new ShuffleItem(el, this.options.isRTL)); // Add classes and set initial positions.\n\n    this._initItems(items); // Determine which items will go with the current filter.\n\n\n    this._resetCols();\n\n    const allItems = this._mergeNewItems(items);\n\n    const sortedItems = sorter(allItems, this.lastSort);\n\n    const allSortedItemsSet = this._filter(this.lastFilter, sortedItems);\n\n    const isNewItem = item => items.includes(item);\n\n    const applyHiddenState = item => {\n      item.scale = ShuffleItem.Scale.HIDDEN;\n      item.isHidden = true;\n      item.applyCss(ShuffleItem.Css.HIDDEN.before);\n      item.applyCss(ShuffleItem.Css.HIDDEN.after);\n    }; // Layout all items again so that new items get positions.\n    // Synchonously apply positions.\n\n\n    const itemPositions = this._getNextPositions(allSortedItemsSet.visible);\n\n    allSortedItemsSet.visible.forEach((item, i) => {\n      if (isNewItem(item)) {\n        item.point = itemPositions[i];\n        applyHiddenState(item);\n        item.applyCss(this.getStylesForTransition(item, {}));\n      }\n    });\n    allSortedItemsSet.hidden.forEach(item => {\n      if (isNewItem(item)) {\n        applyHiddenState(item);\n      }\n    }); // Cause layout so that the styles above are applied.\n\n    this.element.offsetWidth; // eslint-disable-line no-unused-expressions\n    // Add transition to each item.\n\n    this.setItemTransitions(items); // Update the list of items.\n\n    this.items = this._mergeNewItems(items); // Update layout/visibility of new and old items.\n\n    this.filter(this.lastFilter);\n  }\n  /**\n   * Disables shuffle from updating dimensions and layout on resize\n   */\n\n\n  disable() {\n    this.isEnabled = false;\n  }\n  /**\n   * Enables shuffle again\n   * @param {boolean} [isUpdateLayout=true] if undefined, shuffle will update columns and gutters\n   */\n\n\n  enable() {\n    let isUpdateLayout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    this.isEnabled = true;\n\n    if (isUpdateLayout) {\n      this.update();\n    }\n  }\n  /**\n   * Remove 1 or more shuffle items.\n   * @param {Element[]} elements An array containing one or more\n   *     elements in shuffle\n   * @return {Shuffle} The shuffle instance.\n   */\n\n\n  remove(elements) {\n    if (!elements.length) {\n      return;\n    }\n\n    const collection = arrayUnique(elements);\n    const oldItems = collection.map(element => this.getItemByElement(element)).filter(item => !!item);\n\n    const handleLayout = () => {\n      this._disposeItems(oldItems); // Remove the collection in the callback\n\n\n      collection.forEach(element => {\n        element.parentNode.removeChild(element);\n      });\n\n      this._dispatch(Shuffle.EventType.REMOVED, {\n        collection\n      });\n    }; // Hide collection first.\n\n\n    this._toggleFilterClasses({\n      visible: [],\n      hidden: oldItems\n    });\n\n    this._shrink(oldItems);\n\n    this.sort(); // Update the list of items here because `remove` could be called again\n    // with an item that is in the process of being removed.\n\n    this.items = this.items.filter(item => !oldItems.includes(item));\n\n    this._updateItemCount();\n\n    this.once(Shuffle.EventType.LAYOUT, handleLayout);\n  }\n  /**\n   * Retrieve a shuffle item by its element.\n   * @param {Element} element Element to look for.\n   * @return {?ShuffleItem} A shuffle item or undefined if it's not found.\n   */\n\n\n  getItemByElement(element) {\n    return this.items.find(item => item.element === element);\n  }\n  /**\n   * Dump the elements currently stored and reinitialize all child elements which\n   * match the `itemSelector`.\n   */\n\n\n  resetItems() {\n    // Remove refs to current items.\n    this._disposeItems(this.items);\n\n    this.isInitialized = false; // Find new items in the DOM.\n\n    this.items = this._getItems(); // Set initial styles on the new items.\n\n    this._initItems(this.items);\n\n    this.once(Shuffle.EventType.LAYOUT, () => {\n      // Add transition to each item.\n      this.setItemTransitions(this.items);\n      this.isInitialized = true;\n    }); // Lay out all items.\n\n    this.filter(this.lastFilter);\n  }\n  /**\n   * Destroys shuffle, removes events, styles, and classes\n   */\n\n\n  destroy() {\n    this._cancelMovement();\n\n    if (this._resizeObserver) {\n      this._resizeObserver.unobserve(this.element);\n\n      this._resizeObserver = null;\n    } // Reset container styles\n\n\n    this.element.classList.remove('shuffle');\n    this.element.removeAttribute('style'); // Reset individual item styles\n\n    this._disposeItems(this.items);\n\n    this.items.length = 0;\n    this.sortedItems.length = 0;\n    this._transitions.length = 0; // Null DOM references\n\n    this.options.sizer = null;\n    this.element = null; // Set a flag so if a debounced resize has been triggered,\n    // it can first check if it is actually isDestroyed and not doing anything\n\n    this.isDestroyed = true;\n    this.isEnabled = false;\n  }\n  /**\n   * Returns the outer width of an element, optionally including its margins.\n   *\n   * There are a few different methods for getting the width of an element, none of\n   * which work perfectly for all Shuffle's use cases.\n   *\n   * 1. getBoundingClientRect() `left` and `right` properties.\n   *   - Accounts for transform scaled elements, making it useless for Shuffle\n   *   elements which have shrunk.\n   * 2. The `offsetWidth` property.\n   *   - This value stays the same regardless of the elements transform property,\n   *   however, it does not return subpixel values.\n   * 3. getComputedStyle()\n   *   - This works great Chrome, Firefox, Safari, but IE<=11 does not include\n   *   padding and border when box-sizing: border-box is set, requiring a feature\n   *   test and extra work to add the padding back for IE and other browsers which\n   *   follow the W3C spec here.\n   *\n   * @param {Element} element The element.\n   * @param {boolean} [includeMargins=false] Whether to include margins.\n   * @return {{width: number, height: number}} The width and height.\n   */\n\n\n  static getSize(element) {\n    let includeMargins = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    // Store the styles so that they can be used by others without asking for it again.\n    const styles = window.getComputedStyle(element, null);\n    let width = getNumberStyle(element, 'width', styles);\n    let height = getNumberStyle(element, 'height', styles);\n\n    if (includeMargins) {\n      const marginLeft = getNumberStyle(element, 'marginLeft', styles);\n      const marginRight = getNumberStyle(element, 'marginRight', styles);\n      const marginTop = getNumberStyle(element, 'marginTop', styles);\n      const marginBottom = getNumberStyle(element, 'marginBottom', styles);\n      width += marginLeft + marginRight;\n      height += marginTop + marginBottom;\n    }\n\n    return {\n      width,\n      height\n    };\n  }\n  /**\n   * Change a property or execute a function which will not have a transition\n   * @param {Element[]} elements DOM elements that won't be transitioned.\n   * @param {function} callback A function which will be called while transition\n   *     is set to 0ms.\n   * @private\n   */\n\n\n  static _skipTransitions(elements, callback) {\n    const zero = '0ms'; // Save current duration and delay.\n\n    const data = elements.map(element => {\n      const {\n        style\n      } = element;\n      const duration = style.transitionDuration;\n      const delay = style.transitionDelay; // Set the duration to zero so it happens immediately\n\n      style.transitionDuration = zero;\n      style.transitionDelay = zero;\n      return {\n        duration,\n        delay\n      };\n    });\n    callback(); // Cause forced synchronous layout.\n\n    elements[0].offsetWidth; // eslint-disable-line no-unused-expressions\n    // Put the duration back\n\n    elements.forEach((element, i) => {\n      element.style.transitionDuration = data[i].duration;\n      element.style.transitionDelay = data[i].delay;\n    });\n  }\n\n}\n\nShuffle.ShuffleItem = ShuffleItem;\nShuffle.ALL_ITEMS = 'all';\nShuffle.FILTER_ATTRIBUTE_KEY = 'groups';\n/** @enum {string} */\n\nShuffle.EventType = {\n  LAYOUT: 'shuffle:layout',\n  REMOVED: 'shuffle:removed'\n};\n/** @enum {string} */\n\nShuffle.Classes = Classes;\n/** @enum {string} */\n\nShuffle.FilterMode = {\n  ANY: 'any',\n  ALL: 'all'\n}; // Overrideable options\n\nShuffle.options = {\n  // Initial filter group.\n  group: Shuffle.ALL_ITEMS,\n  // Transition/animation speed (milliseconds).\n  speed: 250,\n  // CSS easing function to use.\n  easing: 'cubic-bezier(0.4, 0.0, 0.2, 1)',\n  // e.g. '.picture-item'.\n  itemSelector: '*',\n  // Element or selector string. Use an element to determine the size of columns\n  // and gutters.\n  sizer: null,\n  // A static number or function that tells the plugin how wide the gutters\n  // between columns are (in pixels).\n  gutterWidth: 0,\n  // A static number or function that returns a number which tells the plugin\n  // how wide the columns are (in pixels).\n  columnWidth: 0,\n  // If your group is not json, and is comma delimited, you could set delimiter\n  // to ','.\n  delimiter: null,\n  // Useful for percentage based heights when they might not always be exactly\n  // the same (in pixels).\n  buffer: 0,\n  // Reading the width of elements isn't precise enough and can cause columns to\n  // jump between values.\n  columnThreshold: 0.01,\n  // Shuffle can be initialized with a sort object. It is the same object\n  // given to the sort method.\n  initialSort: null,\n  // Transition delay offset for each item in milliseconds.\n  staggerAmount: 15,\n  // Maximum stagger delay in milliseconds.\n  staggerAmountMax: 150,\n  // Whether to use transforms or absolute positioning.\n  useTransforms: true,\n  // Affects using an array with filter. e.g. `filter(['one', 'two'])`. With \"any\",\n  // the element passes the test if any of its groups are in the array. With \"all\",\n  // the element only passes if all groups are in the array.\n  // Note, this has no effect if you supply a custom filter function.\n  filterMode: Shuffle.FilterMode.ANY,\n  // Attempt to center grid items in each row.\n  isCentered: false,\n  // Attempt to align grid items to right.\n  isRTL: false,\n  // Whether to round pixel values used in translate(x, y). This usually avoids\n  // blurriness.\n  roundTransforms: true\n};\nShuffle.Point = Point;\nShuffle.Rect = Rect; // Expose for testing. Hack at your own risk.\n\nShuffle.__sorter = sorter;\nShuffle.__getColumnSpan = getColumnSpan;\nShuffle.__getAvailablePositions = getAvailablePositions;\nShuffle.__getShortColumn = getShortColumn;\nShuffle.__getCenteredPositions = getCenteredPositions;\n\nexport { Shuffle as default };\n//# sourceMappingURL=shuffle.esm.js.map\n","module.exports = jQuery;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import Shuffle from 'shufflejs';\n\nvar rsShuffle = new Shuffle(document.querySelector('.rs-shuffle__container'), {\n    itemSelector: '.rs-shuffle__item',\n    sizer       : '.rs-shuffle__sizer',\n    buffer      : 1,\n});\n\n$('.rs-shuffle__filter li').on('click', function() {\n    $('.rs-shuffle__filter li').removeClass('active');\n    $(this).addClass('active');\n\n    rsShuffle.filter($(this).attr('data-filter'));\n\n    return false;\n});"],"names":["Shuffle","rsShuffle","document","querySelector","itemSelector","sizer","buffer","$","on","removeClass","addClass","filter","attr"],"sourceRoot":""}